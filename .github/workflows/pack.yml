name: pack-and-publish

on:
  push:
    branches: [main]
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  build-test-pack:
    name: Build, Test, Pack
    runs-on: ubuntu-latest
    outputs:
      pkg_version: ${{ steps.set_pkg_version.outputs.pkg_version }}
      gitversion_ok: ${{ steps.set_pkg_version.outputs.gitversion_ok }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # required for versioning to see full history
          fetch-tags: true

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # Use official GitVersion Action to calculate version from history/commits
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v2
        with:
          versionSpec: '6.0.x'

      - name: Determine Package Version (GitVersion)
        id: gitversion
        uses: gittools/actions/gitversion/execute@v2
        continue-on-error: true
        with:
          useConfigFile: true
          configFilePath: GitVersion.yml
          verbosity: Diagnostic

      - name: Set PackageVersion env (with safe fallback)
        id: set_pkg_version
        shell: bash
        run: |
          set -euo pipefail
          ver='${{ steps.gitversion.outputs.NuGetVersionV2 }}'
          ok='false'
          if [ -n "$ver" ]; then
            ok='true'
          else
            # Build a deterministic fallback SemVer when GitVersion fails
            # Use GitHub run number and short SHA in a CI prerelease
            short_sha=$(git rev-parse --short HEAD || echo unknown)
            ver="0.0.0-ci.${GITHUB_RUN_NUMBER}-${short_sha}"
            if [ "${ACT:-}" = "true" ]; then
              ver="0.0.0-local"
              echo "GitVersion output empty under act; using fallback: $ver"
            else
              echo "GitVersion did not produce NuGetVersionV2; using fallback: $ver (publishing will be skipped)."
              # Provide some quick repo diagnostics to logs
              git status --porcelain=v1 || true
              git branch -a || true
              git log --oneline -n 10 || true
            fi
          fi
          echo "Using package version: $ver"
          echo "PKG_VERSION=$ver" >> "$GITHUB_ENV"
          echo "pkg_version=$ver" >> "$GITHUB_OUTPUT"
          echo "gitversion_ok=$ok" >> "$GITHUB_OUTPUT"

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.fsproj', 'global.json', 'NuGet.Config') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Ensure package output directory
        run: mkdir -p ./.nupkgs

      - name: Ensure optional local-shimgen source exists
        run: mkdir -p ./.nuget-local

      # Phase 1: Create local feed by packing the dependency projects first
      - name: Pack Annotations (bootstrap local feed)
        run: dotnet pack Annotations/Headsetsniper.Godot.FSharp.Annotations.csproj -c Release -o ./.nupkgs /p:Version=${{ env.PKG_VERSION }}

      - name: Pack ShimGen (bootstrap local feed)
        run: dotnet pack ShimGen/Headsetsniper.Godot.FSharp.ShimGen.csproj -c Release -o ./.nupkgs /p:Version=${{ env.PKG_VERSION }}

      # Phase 2: Restore/build/test the rest using the local feed + nuget.org
      - name: Restore main project
        run: dotnet restore FsharpWithShim.csproj -p:ShimGenPackageVersion=${{ env.PKG_VERSION }}

      - name: Build (Release)
        run: dotnet build FsharpWithShim.csproj -c Release --no-restore -p:ShimGenPackageVersion=${{ env.PKG_VERSION }}

      - name: Test (Release)
        run: dotnet test ShimGen.Tests/ShimGen.Tests.csproj -c Release --verbosity normal

      - name: Verify packages produced
        shell: bash
        run: |
          set -euo pipefail
          echo "Resolved version: ${{ env.PKG_VERSION }}"
          echo "Listing ./.nupkgs contents:" && ls -la ./.nupkgs || true
          count=$(ls -1 ./.nupkgs/*.nupkg 2>/dev/null | wc -l | xargs)
          if [ "$count" = "0" ]; then
            echo "ERROR: No .nupkg files were produced in ./.nupkgs" >&2
            exit 1
          fi

      - name: Upload .nupkgs
        if: ${{ !env.ACT }}
        uses: actions/upload-artifact@v4
        with:
          name: nupkgs
          path: ${{ github.workspace }}/.nupkgs
          if-no-files-found: error
          include-hidden-files: true

  publish-nuget:
    name: Publish to NuGet.org
    needs: build-test-pack
    # Publish on pushes to main (no tag dependency). Guard to avoid PRs.
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.build-test-pack.outputs.gitversion_ok == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: nupkgs
          path: ./.nupkgs

      - name: Push to NuGet.org
        run: dotnet nuget push ./.nupkgs/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate

  # Optional: Publish to GitHub Packages (NuGet)
  # Enable by setting `if: startsWith(github.ref, 'refs/tags/v')` and configuring permissions
  publish-gpr:
    name: Publish to GitHub Packages
    needs: build-test-pack
    if: false
    runs-on: ubuntu-latest
    steps:
      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: nupkgs
          path: ./.nupkgs

      - name: Push to GitHub Packages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          OWNER=${{ github.repository_owner }}
          dotnet nuget push ./.nupkgs/*.nupkg \
            --api-key "$GITHUB_TOKEN" \
            --source "https://nuget.pkg.github.com/${OWNER}/index.json" \
            --skip-duplicate
