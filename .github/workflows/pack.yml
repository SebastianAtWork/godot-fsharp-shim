name: pack-and-publish

on:
  push:
    branches: [main]
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  build-test-pack:
    name: Build, Test, Pack
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # required for versioning to see full history
          fetch-tags: true

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Determine Package Version (GitVersion or fallbacks)
        id: resolve_version
        shell: bash
        run: |
          set -euo pipefail
          v=""
          # Try GitVersion.Tool if available; install if missing
          if ! command -v dotnet-gitversion >/dev/null 2>&1; then
            dotnet tool install -g GitVersion.Tool >/dev/null 2>&1 || true
            export PATH="$HOME/.dotnet/tools:$PATH"
          fi
          if command -v dotnet-gitversion >/dev/null 2>&1; then
            # Prefer single-variable output to avoid JSON parsing
            if dotnet-gitversion /showvariable NuGetVersionV2 >/dev/null 2>&1; then
              v=$(dotnet-gitversion /showvariable NuGetVersionV2 || echo "")
            fi
          fi
          # Fallback: tag ref like refs/tags/v1.2.3
          if [[ -z "${v}" || "${v}" == "undefined" ]]; then
            if [[ "${GITHUB_REF:-}" == refs/tags/v* ]]; then
              v="${GITHUB_REF#refs/tags/v}"
              echo "Using version from tag ref: $v" >&2
            fi
          fi
          # Fallback: latest tag in repo
          if [[ -z "${v}" || "${v}" == "undefined" ]]; then
            if command -v git >/dev/null 2>&1 && git -C "$GITHUB_WORKSPACE" rev-parse --git-dir >/dev/null 2>&1; then
              tag=$(git -C "$GITHUB_WORKSPACE" describe --tags --abbrev=0 2>/dev/null || true)
              if [[ -n "$tag" ]]; then
                v="${tag#v}"
                echo "Using version from git tag: $v" >&2
              fi
            fi
          fi
          # Final fallback
          if [[ -z "${v}" || "${v}" == "undefined" ]]; then
            v="0.0.0-local.${GITHUB_RUN_NUMBER:-0}"
            echo "Using fallback version: $v" >&2
          fi
          echo "value=$v" >> "$GITHUB_OUTPUT"
          echo "Resolved package version: $v"

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.fsproj', 'global.json', 'NuGet.Config') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      # Phase 1: Create local feed by packing the dependency projects first
      - name: Pack Annotations (bootstrap local feed)
        run: dotnet pack Annotations/Headsetsniper.Godot.FSharp.Annotations.csproj -c Release -o ./.nupkgs /p:Version=${{ steps.resolve_version.outputs.value }}

      - name: Pack ShimGen (bootstrap local feed)
        run: dotnet pack ShimGen/Headsetsniper.Godot.FSharp.ShimGen.csproj -c Release -o ./.nupkgs /p:Version=${{ steps.resolve_version.outputs.value }}

      # Phase 2: Restore/build/test the rest using the local feed + nuget.org
      - name: Restore main project
        run: dotnet restore FsharpWithShim.csproj

      - name: Build (Release)
        run: dotnet build FsharpWithShim.csproj -c Release --no-restore

      - name: Test (Release)
        run: dotnet test ShimGen.Tests/ShimGen.Tests.csproj -c Release --verbosity normal

      - name: Upload .nupkgs
        uses: actions/upload-artifact@v4
        with:
          name: nupkgs
          path: ./.nupkgs

  publish-nuget:
    name: Publish to NuGet.org
    needs: build-test-pack
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: nupkgs
          path: ./.nupkgs

      - name: Push to NuGet.org
        run: dotnet nuget push ./.nupkgs/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate

  # Optional: Publish to GitHub Packages (NuGet)
  # Enable by setting `if: startsWith(github.ref, 'refs/tags/v')` and configuring permissions
  publish-gpr:
    name: Publish to GitHub Packages
    needs: build-test-pack
    if: false
    runs-on: ubuntu-latest
    steps:
      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: nupkgs
          path: ./.nupkgs

      - name: Push to GitHub Packages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          OWNER=${{ github.repository_owner }}
          dotnet nuget push ./.nupkgs/*.nupkg \
            --api-key "$GITHUB_TOKEN" \
            --source "https://nuget.pkg.github.com/${OWNER}/index.json" \
            --skip-duplicate
