<Project>
  <PropertyGroup>
    <FSharpShimsEnabled Condition="'$(FSharpShimsEnabled)'==''">true</FSharpShimsEnabled>
    <FSharpShimsOutDir Condition="'$(FSharpShimsOutDir)'==''">$(MSBuildProjectDirectory)\Scripts\Generated</FSharpShimsOutDir>
  </PropertyGroup>

  <!-- Include shims at evaluation so they are compiled -->
  <ItemGroup Condition="'$(FSharpShimsEnabled)'=='true'">
    <Compile Include="$(FSharpShimsOutDir)\**\*.cs" />
  </ItemGroup>

  <Target Name="GenerateFSharpShims"
          BeforeTargets="CoreCompile"
          DependsOnTargets="ResolveReferences"
          Condition="'$(FSharpShimsEnabled)'=='true'">

    <ItemGroup>
      <!-- Find referenced F# projects via OriginalItemSpec ending with .fsproj -->
      <_FsProjRefs Include="@(ProjectReferenceWithTargetPath)"
                   Condition="$([System.String]::Copy('%(ProjectReferenceWithTargetPath.OriginalItemSpec)').ToLowerInvariant().EndsWith('.fsproj'))" />
    </ItemGroup>

    <PropertyGroup>
      <ShimOutDir>$(FSharpShimsOutDir)</ShimOutDir>
      <!-- ShimGen is packaged under lib/{tfm}; keep tfm aligned with consumer project (Godot 4.5 uses net8.0) -->
      <ShimGenDll>$(MSBuildThisFileDirectory)..\lib\$(TargetFramework)\ShimGen.dll</ShimGenDll>
    </PropertyGroup>

    <MakeDir Directories="$(ShimOutDir)" />

    <!-- Execute ShimGen once per referenced F# project -->
    <Message Importance="Low" Text="ShimGen scanning @(_FsProjRefs->'%(OriginalItemSpec) | %(_FsProjRefs.TargetPath)', ', ')" />
    <Exec Command="dotnet &quot;$(ShimGenDll)&quot; &quot;%(_FsProjRefs.TargetPath)&quot; &quot;$(ShimOutDir)&quot;"
          StandardOutputImportance="Low"
          StandardErrorImportance="High"
          Condition=" '@(_FsProjRefs)' != '' " />
  </Target>

  <!-- IDE design-time helper: add a hint reference to F# outputs so C# tooling can resolve F# types in editors.
       This runs only during design-time builds and never copies F# assemblies to the output. -->
  <ItemGroup Condition="'$(DesignTimeBuild)'=='true' and '$(FSharpShimsEnabled)'=='true'">
    <!-- Find referenced F# projects by extension -->
    <_DesignFsProj Include="@(ProjectReference)"
                   Condition="$([System.String]::Copy('%(ProjectReference.Identity)').ToLowerInvariant().EndsWith('.fsproj'))" />

    <!-- Compute design-time hint path and assembly name from project filename -->
    <_FsDesignRef Include="@(_DesignFsProj)">
      <DesignHint>$([System.IO.Path]::Combine($([System.IO.Path]::GetDirectoryName('%(Identity)')),'bin','$(Configuration)','$(TargetFramework)',$([System.IO.Path]::GetFileNameWithoutExtension('%(Filename)')) + '.dll'))</DesignHint>
      <DesignName>$([System.IO.Path]::GetFileNameWithoutExtension('%(Filename)'))</DesignName>
    </_FsDesignRef>

    <!-- Add one Reference per F# project when the DLL exists -->
    <Reference Include="%(_FsDesignRef.DesignName)" Condition="Exists('%(_FsDesignRef.DesignHint)')">
      <HintPath>%(_FsDesignRef.DesignHint)</HintPath>
      <Private>false</Private>
    </Reference>
  </ItemGroup>
</Project>
