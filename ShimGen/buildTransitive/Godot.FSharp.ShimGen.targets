<Project>
  <PropertyGroup>
    <FSharpShimsEnabled Condition="'$(FSharpShimsEnabled)'==''">true</FSharpShimsEnabled>
    <FSharpShimsOutDir Condition="'$(FSharpShimsOutDir)'==''">$(MSBuildProjectDirectory)\Scripts\Generated</FSharpShimsOutDir>
  </PropertyGroup>

  <Target Name="ResolveShimGenToolPath" BeforeTargets="RunShimGen" Condition=" '$(FSharpShimsEnabled)' != 'false' ">
    <ItemGroup>
      <_ShimGenPkg Include="@(PackageReference)" Condition="'%(PackageReference.Identity)' == 'Headsetsniper.Godot.FSharp.ShimGen'" />
    </ItemGroup>
    <PropertyGroup>
      <_ShimGenVersion>%(_ShimGenPkg.Version)</_ShimGenVersion>
      <_NuGetRoot>$(NuGetPackageRoot)</_NuGetRoot>
      <_NuGetRoot Condition="'$(_NuGetRoot)' == ''">$([System.Environment]::GetEnvironmentVariable('NUGET_PACKAGES'))</_NuGetRoot>
      <_HomeDir>$([System.Environment]::GetEnvironmentVariable('HOME'))</_HomeDir>
      <_UserProfileDir>$([System.Environment]::GetEnvironmentVariable('USERPROFILE'))</_UserProfileDir>
      <_HomeDir Condition="'$(_HomeDir)' == ''">$(_UserProfileDir)</_HomeDir>
      <_NuGetRoot Condition="'$(_NuGetRoot)' == '' and '$(_HomeDir)' != ''">$([System.IO.Path]::Combine('$(_HomeDir)', '.nuget', 'packages'))</_NuGetRoot>
      <_ShimGenToolFromPkg>$([System.IO.Path]::Combine('$(_NuGetRoot)', 'headsetsniper.godot.fsharp.shimgen', '$(_ShimGenVersion)', 'lib', '$(TargetFramework)', 'Headsetsniper.Godot.FSharp.ShimGen.dll'))</_ShimGenToolFromPkg>
      <_ShimGenLocalBin>$([System.IO.Path]::Combine('$(MSBuildThisFileDirectory)', '..', 'bin', '$(Configuration)', '$(TargetFramework)', 'Headsetsniper.Godot.FSharp.ShimGen.dll'))</_ShimGenLocalBin>
      <_ShimGenLibNextToTargets>$([System.IO.Path]::Combine('$(MSBuildThisFileDirectory)', '..', 'lib', '$(TargetFramework)', 'Headsetsniper.Godot.FSharp.ShimGen.dll'))</_ShimGenLibNextToTargets>
      <_ShimGenTool Condition="Exists('$(_ShimGenToolFromPkg)')">$(_ShimGenToolFromPkg)</_ShimGenTool>
      <_ShimGenTool Condition="'$(_ShimGenTool)' == '' and Exists('$(_ShimGenLocalBin)')">$(_ShimGenLocalBin)</_ShimGenTool>
      <_ShimGenTool Condition="'$(_ShimGenTool)' == '' and Exists('$(_ShimGenLibNextToTargets)')">$(_ShimGenLibNextToTargets)</_ShimGenTool>
    </PropertyGroup>
    <Message Text="[shimgen] Tool candidates: pkg=$(_ShimGenToolFromPkg)[exists=$([System.IO.File]::Exists('$(_ShimGenToolFromPkg)'))] localBin=$(_ShimGenLocalBin)[exists=$([System.IO.File]::Exists('$(_ShimGenLocalBin)'))] libNext=$(_ShimGenLibNextToTargets)[exists=$([System.IO.File]::Exists('$(_ShimGenLibNextToTargets)'))]" Importance="Low" />
  </Target>

  <Target Name="CollectFSharpOutputs" AfterTargets="ResolveReferences" BeforeTargets="RunShimGen" Condition=" '$(FSharpShimsEnabled)' != 'false' ">
    <ItemGroup>
      <_FSharpRefs Include="@(ReferencePath)" Condition="$([System.String]::Copy('%(ReferencePath.MSBuildSourceProjectFile)').EndsWith('.fsproj', System.StringComparison.OrdinalIgnoreCase))" />
    </ItemGroup>
    <Message Text="[shimgen] F# ReferencePath count=@(_FSharpRefs->Count())" Importance="Low" />
  </Target>

  <Target Name="RunShimGen" AfterTargets="ResolveReferences" BeforeTargets="CoreCompile;Compile" Condition=" '$(FSharpShimsEnabled)' != 'false' and '@(_FSharpRefs)' != '' and Exists('$(_ShimGenTool)') ">
    <MakeDir Directories="$(FSharpShimsOutDir)" Condition="!Exists('$(FSharpShimsOutDir)')" />
    <Message Text="[shimgen] Using tool: $(_ShimGenTool)" Importance="High" />
    <Message Text="[shimgen] F# assemblies: @(_FSharpRefs)" Importance="Low" />
    <Exec Command="dotnet &quot;$(_ShimGenTool)&quot; &quot;%(_FSharpRefs.Identity)&quot; &quot;$(FSharpShimsOutDir)&quot; &quot;$([System.IO.Path]::GetDirectoryName('%(_FSharpRefs.MSBuildSourceProjectFile)'))&quot;"
          WorkingDirectory="$([System.IO.Path]::GetDirectoryName('%(_FSharpRefs.Identity)'))"
          StandardOutputImportance="Low" StandardErrorImportance="High" />
    <ItemGroup>
      <Compile Include="$(FSharpShimsOutDir)\**\*.cs" Visible="false" />
      <FileWrites Include="$(FSharpShimsOutDir)\**\*.cs" />
    </ItemGroup>
  </Target>

  <Target Name="CleanGeneratedShims" AfterTargets="Clean">
    <RemoveDir Directories="$(FSharpShimsOutDir)" Condition="Exists('$(FSharpShimsOutDir)')" />
  </Target>
</Project>
