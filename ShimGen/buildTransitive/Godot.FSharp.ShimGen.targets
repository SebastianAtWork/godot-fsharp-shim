<Project>
  <PropertyGroup>
    <FSharpShimsEnabled Condition="'$(FSharpShimsEnabled)'==''">true</FSharpShimsEnabled>
    <FSharpShimsOutDir Condition="'$(FSharpShimsOutDir)'==''">$(MSBuildProjectDirectory)\Scripts\Generated</FSharpShimsOutDir>
  </PropertyGroup>

  <!-- Ensure shim generation participates in the standard Build pipeline (Godot.NET.Sdk alters targets) -->
  <PropertyGroup Condition="'$(FSharpShimsEnabled)'=='true'">
    <BuildDependsOn>GenerateFSharpShims;$(BuildDependsOn)</BuildDependsOn>
  </PropertyGroup>

  <!-- Include shims at evaluation so they are compiled -->
  <ItemGroup Condition="'$(FSharpShimsEnabled)'=='true'">
    <Compile Include="$(FSharpShimsOutDir)\**\*.cs" />
  </ItemGroup>

  <Target Name="GenerateFSharpShims"
    BeforeTargets="CoreCompile;Build"
          DependsOnTargets="ResolveReferences"
          Condition="'$(FSharpShimsEnabled)'=='true'">

    <ItemGroup>
      <!-- Find referenced F# projects via OriginalItemSpec ending with .fsproj -->
      <_FsProjRefs Include="@(ProjectReferenceWithTargetPath)"
                   Condition="$([System.String]::Copy('%(ProjectReferenceWithTargetPath.OriginalItemSpec)').ToLowerInvariant().EndsWith('.fsproj'))" />
    </ItemGroup>

    <PropertyGroup>
      <ShimOutDir>$(FSharpShimsOutDir)</ShimOutDir>
      <!-- Discover ShimGen.dll robustly: prefer NuGet cache, then local bin (repo dev), then lib/{tfm} fallback -->
      <_NuGetPackagesFolder>$([System.Environment]::GetEnvironmentVariable('NUGET_PACKAGES'))</_NuGetPackagesFolder>
      <_NuGetPackagesFolder Condition="'$(_NuGetPackagesFolder)' == '' and '$(NuGetPackageRoot)' != ''">$(NuGetPackageRoot)</_NuGetPackagesFolder>
      <_HomeDir>$([System.Environment]::GetEnvironmentVariable('HOME'))</_HomeDir>
      <_UserProfileDir>$([System.Environment]::GetEnvironmentVariable('USERPROFILE'))</_UserProfileDir>
      <_HomeDir Condition="'$(_HomeDir)' == ''">$(_UserProfileDir)</_HomeDir>
      <_NuGetPackagesFolder Condition="'$(_NuGetPackagesFolder)' == '' and '$(_HomeDir)' != ''">$([System.IO.Path]::Combine('$(_HomeDir)', '.nuget', 'packages'))</_NuGetPackagesFolder>
    </PropertyGroup>
    <ItemGroup>
      <_ShimGenDllFromNuGet Include="$([System.IO.Path]::Combine('$(_NuGetPackagesFolder)', 'headsetsniper.godot.fsharp.shimgen', '**', 'lib', '$(TargetFramework)', 'Headsetsniper.Godot.FSharp.ShimGen.dll'))" />
    </ItemGroup>
    <PropertyGroup>
      <ShimGenDll Condition="'$(ShimGenDll)' == '' and '@(_ShimGenDllFromNuGet)' != ''">@(_ShimGenDllFromNuGet->'%(FullPath)')</ShimGenDll>
      <_ShimGenLocalBinDll>$([System.IO.Path]::Combine('$(MSBuildThisFileDirectory)', '..', 'bin', '$(Configuration)', '$(TargetFramework)', 'Headsetsniper.Godot.FSharp.ShimGen.dll'))</_ShimGenLocalBinDll>
      <ShimGenDll Condition="'$(ShimGenDll)' == '' and Exists('$(_ShimGenLocalBinDll)')">$(_ShimGenLocalBinDll)</ShimGenDll>
      <_ShimGenLibDll>$([System.IO.Path]::Combine('$(MSBuildThisFileDirectory)', '..', 'lib', '$(TargetFramework)', 'Headsetsniper.Godot.FSharp.ShimGen.dll'))</_ShimGenLibDll>
      <ShimGenDll Condition="'$(ShimGenDll)' == ''">$(_ShimGenLibDll)</ShimGenDll>
    </PropertyGroup>

    <MakeDir Directories="$(ShimOutDir)" />

    <!-- Execute ShimGen once per referenced F# project -->
    <Message Importance="Low" Text="ShimGen scanning @( _FsProjRefs->'%(OriginalItemSpec) | %(_FsProjRefs.TargetPath)', ', ')" />
  <Exec Command="dotnet &quot;$(ShimGenDll)&quot; &quot;%(_FsProjRefs.TargetPath)&quot; &quot;$(ShimOutDir)&quot; &quot;$([System.IO.Path]::GetDirectoryName('%(_FsProjRefs.OriginalItemSpec)'))&quot;"
          StandardOutputImportance="Low"
          StandardErrorImportance="High"
          Condition=" '@(_FsProjRefs)' != '' " />
  </Target>

  <!-- Design-time helper removed; see sibling targets file for rationale. -->
</Project>
